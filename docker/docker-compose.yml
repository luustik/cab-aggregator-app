volumes:
  pg_passenger:
  pg_driver:
  pg_rating:
  pg_ride:
  kafka_data:
  zookeeper_data:
  elastic_data:

services:

  discovery-service:
    image: discovery-service
    container_name: discovery-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: discovery-service
    ports:
      - "8761:8761"
    networks:
      - cab-aggregator-app
    depends_on:
      ride_db:
        condition: service_healthy
      passenger_db:
        condition: service_healthy
      driver_db:
        condition: service_healthy
      rating_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://discovery-service:8761/actuator/health" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 10s

  config-server:
    image: config-server
    container_name: config-server
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: config-server
    ports:
      - "8000:8000"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://discovery-service:8761/eureka/apps/config-server || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  driver-service:
    image: driver-service:latest
    container_name: driver-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: driver-service
    ports:
      - "8082:8082"
    environment:
      - DB_URL=jdbc:postgresql://driver_db:5432/driver_db
      - DB_USERNAME=user
      - DB_PASSWORD=pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - KAFKA=kafka:29092
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://driver-service:8082/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 90s

  passenger-service:
    image: passenger-service:latest
    container_name: passenger-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: passenger-service
    ports:
      - "8081:8081"
    environment:
      - DB_URL=jdbc:postgresql://passenger_db:5432/passenger_db
      - DB_USERNAME=user
      - DB_PASSWORD=pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - KAFKA=kafka:29092
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://passenger-service:8081/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 90s

  rating-service:
    image: rating-service:latest
    container_name: rating-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: rating-service
    ports:
      - "8084:8084"
    environment:
      - DB_URL=jdbc:postgresql://rating_db:5432/rating_db
      - DB_USERNAME=user
      - DB_PASSWORD=pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - KAFKA=kafka:29092
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://rating-service:8084/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 90s

  ride-service:
    image: ride-service:latest
    container_name: ride-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: ride-service
    ports:
      - "8083:8083"
    environment:
      - DB_URL=jdbc:postgresql://ride_db:5432/ride_db
      - DB_USERNAME=user
      - DB_PASSWORD=pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://ride-service:8083/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 90s

  gateway-service:
    image: gateway-service:latest
    container_name: gateway-service
    build:
      context: ../
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: gateway-service
    ports:
      - "8888:8888"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      driver-service:
        condition: service_healthy
      passenger-service:
        condition: service_healthy
      rating-service:
        condition: service_healthy
      ride-service:
        condition: service_healthy
    networks:
      - cab-aggregator-app

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/wurstmeister/zookeeper
    networks:
      - cab-aggregator-app
    depends_on:
      kibana:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/wurstmeister/kafka
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "nc -z kafka 29092" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  passenger_db:
    image: postgres:15.1-alpine
    container_name: passenger
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=passenger_db
    volumes:
      - pg_passenger:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    networks:
      - cab-aggregator-app
    depends_on:
      kibana:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d passenger_db" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 5s

  driver_db:
    image: postgres:15.1-alpine
    container_name: driver
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=driver_db
    volumes:
      - pg_driver:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cab-aggregator-app
    depends_on:
      kibana:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d driver_db" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 5s

  ride_db:
    image: postgres:15.1-alpine
    container_name: ride
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=ride_db
    volumes:
      - pg_ride:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d ride_db" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 5s

  rating_db:
    image: postgres:15.1-alpine
    container_name: rating
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=rating_db
    volumes:
      - pg_rating:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - cab-aggregator-app
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d rating_db" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 5s

  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - bootstrap.memory_lock=true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 5s
      retries: 5
      timeout: 15s
      start_period: 30s
    networks:
      - cab-aggregator-app

  logstash:
    image: logstash:7.14.0
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600/_node/stats" ]
      interval: 5s
      retries: 5
      timeout: 15s
      start_period: 30s
    networks:
      - cab-aggregator-app

  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    command: ["filebeat", "-e", "--strict.perms=false"]
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep filebeat || exit 1"]
      interval: 5s
      retries: 5
      timeout: 15s
      start_period: 30s
    networks:
      - cab-aggregator-app

  kibana:
    image: kibana:7.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      filebeat:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 5s
      retries: 5
      timeout: 15s
      start_period: 30s
    networks:
      - cab-aggregator-app

networks:
  cab-aggregator-app: